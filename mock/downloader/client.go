// Code generated by MockGen. DO NOT EDIT.
// Source: ./downloader/client.go

// Package mock_downloader is a generated GoMock package.
package mock_downloader

import (
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIHttpClient is a mock of IHttpClient interface.
type MockIHttpClient struct {
	ctrl     *gomock.Controller
	recorder *MockIHttpClientMockRecorder
}

// MockIHttpClientMockRecorder is the mock recorder for MockIHttpClient.
type MockIHttpClientMockRecorder struct {
	mock *MockIHttpClient
}

// NewMockIHttpClient creates a new mock instance.
func NewMockIHttpClient(ctrl *gomock.Controller) *MockIHttpClient {
	mock := &MockIHttpClient{ctrl: ctrl}
	mock.recorder = &MockIHttpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHttpClient) EXPECT() *MockIHttpClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockIHttpClient) Do(req *http.Request, headers ...*http.Header) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range headers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockIHttpClientMockRecorder) Do(req interface{}, headers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, headers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockIHttpClient)(nil).Do), varargs...)
}

// GenerateRequest mocks base method.
func (m *MockIHttpClient) GenerateRequest(method, url string, body io.Reader) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRequest", method, url, body)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRequest indicates an expected call of GenerateRequest.
func (mr *MockIHttpClientMockRecorder) GenerateRequest(method, url, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRequest", reflect.TypeOf((*MockIHttpClient)(nil).GenerateRequest), method, url, body)
}
